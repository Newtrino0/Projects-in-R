library(readxl)
library(ggplot2)
H1B_data <- read_excel("C:/Users/mario/Documents/GitHub/Regular_R_Work/H1B_data.xlsx", sheet = "Sheet 1")
H1B_data <- read_excel("C:/Users/XCITE-admin/Documents/GitHub/Regular_R_Work/H1B_data.xlsx", sheet = "Sheet 1")
View(H1B_data)
#Work began at XCITE
colnames(H1B_data)[1]<-"fiscal_year"
subset(H1B_data, fiscal_year <2023)
H1B_data<-subset(H1B_data, fiscal_year <2023)
H1B_data<-subset(H1B_data, fiscal_year <= 2022)
colnames(H1B_data)[1]<-"Year"
H1B_data<-subset(H1B_data, Year <= 2022)
colnames(H1B_data)[1]<-"Year"
colnames(H1B_data)[8]<-"Inital_Approval"
colnames(H1B_data)[9]<-"Inital_Denial"
colnames(H1B_data)[10]<-"Continuing_Approval"
colnames(H1B_data)[11]<-"Continuing_Denial"
H1B_data<-subset(H1B_data, Year <= 2022)
ggplot(H1B_data, aes(Year, Continuing_Approval)) +
geom_point() + geom_line()
tsH1B<-ts(H1B_data$Continuing_Approval, start=2013,end=2022)
library(forecast)
install.packages("forecast")
library(forecast)
tsH1B<-ts(H1B_data$Continuing_Approval, start=2013,end=2022)
plot.ts(tsH1B)
View(tsH1B)
tsH1B<-ts(sum(H1B_data$Continuing_Approval), start=2013,end=2022)
View(tsH1B)
plot.ts(tsH1B)
#Prepare H1B_data
H1B_data<-aggregate(H1B_data,by=list(H1B_data$Year), FUN= mean)
#Prepare H1B_data
H1B_data<-aggregate(H1B_data,by=list(H1B_data$Year), FUN= sum)
H1B_data <- read_excel("C:/Users/XCITE-admin/Documents/GitHub/Regular_R_Work/H1B_data.xlsx", sheet = "Sheet 1")
View(H1B_data)
colnames(H1B_data)[1]<-"Year"
colnames(H1B_data)[8]<-"Inital_Approval"
colnames(H1B_data)[9]<-"Inital_Denial"
colnames(H1B_data)[10]<-"Continuing_Approval"
colnames(H1B_data)[11]<-"Continuing_Denial"
H1B_data<-subset(H1B_data, Year <= 2022)
#Prepare H1B_data
H1B_data<-aggregate(H1B_data,by=list(H1B_data$Year), FUN= sum)
#Prepare H1B_data
H1B_numbers<-H1B_data[1,8,9,10,11]
View(H1B_numbers)
#Prepare H1B_data
H1B_numbers<-H1B_data[1]
#Prepare H1B_data
H1B_numbers<-H1B_data[1]+H1B_data[8]
View(H1B_numbers)
#Prepare H1B_data
H1B_numbers<-H1B_data[c(1,8,9,10,11)]
View(H1B_numbers)
H1B_numbers<-aggregate(H1B_data,by=list(H1B_data$Year), FUN= sum)
H1B_numbers<-aggregate(H1B_data,by=list(H1B_data$Year), FUN=sum)
H1B_numbers<-aggregate(H1B_data,by=list(H1B_data$Year), FUN=mean)
H1B_numbers<-aggregate(H1B_numbers,by=list(H1B_numbers$Year), FUN=sum)
View(H1B_numbers)
H1B_numbers<-H1B_data[c(1,8,9,10,11)]
View(H1B_numbers)
H1B_numbers<-aggregate(H1B_numbers,by=list(H1B_numbers$Year), FUN=sum)
H1B_data <- read_excel("C:/Users/XCITE-admin/Documents/GitHub/Regular_R_Work/H1B_data.xlsx", sheet = "Sheet 1")
View(H1B_data)
colnames(H1B_data)[1]<-"Year"
colnames(H1B_data)[8]<-"Inital_Approval"
colnames(H1B_data)[9]<-"Inital_Denial"
colnames(H1B_data)[10]<-"Continuing_Approval"
colnames(H1B_data)[11]<-"Continuing_Denial"
H1B_data<-subset(H1B_data, Year <= 2022)
H1B_numbers<-H1B_data[c(1,8,9,10,11)]
View(H1B_numbers)
H1B_numbers<-aggregate(H1B_numbers,by=list(H1B_numbers$Year), FUN=sum)
H1B_numbers<-H1B_data[c(1,8,9,10,11)]
View(H1B_numbers)
H1B_numbers<-aggregate(H1B_numbers[2:5],by=list(H1B_numbers$Year), FUN=sum)
H1B_numbers<-aggregate(H1B_numbers[2:5],by=list(H1B_numbers$Year), FUN=sum)
H1B_numbers<-H1B_data[c(1,8,9,10,11)]
View(H1B_numbers)
H1B_numbers<-aggregate(H1B_numbers[2:5],by=list(H1B_numbers$Year), FUN=sum)
tsH1B<-ts(H1B_numbers$Continuing_Approval, start=2013,end=2022)
View(tsH1B)
plot.ts(tsH1B)
LPR_data <- read_excel("C:/Users/XCITE-admin/Documents/GitHub/Regular_R_Work/LPR_1820-2022_data.xlsx", sheet = "LPR obtainments")
View(LPR_data)
#Prepare LPR_data by renaming columns, subsetting, and changing data type
colnames(LPR_data)[2]<-"#_of_LPR_obtained"
tsLPR<-ts(LPR_data$`#_of_LPR_obtained`,start=1820,end=2022)
View(tsLPR)
plot.ts(tsLPR)
tsLPR<-ts(LPR_data$`#_of_LPR_obtained`,start=2013,end=2022)
View(tsLPR)
plot.ts(tsLPR)
knitr::opts_chunk$set(echo = TRUE)
myData<-mtcars
View(myData)
structure(myData)
model<-lm(mpg~disp,myData)
#Plot with relationship
plot(myData$disp,myData$mpg, xlab="disp",ylab="mpg")
abline(model,col="red")
#Plot with residuals and fitted values
plot(model)
hist(model$residuals)
myData<-mtcars
View(myData)
structure(myData)
model<-lm(mpg~disp,myData)
#Plot with relationship
plot(myData$disp,myData$mpg, xlab="disp",ylab="mpg")
abline(model,col="red")
#Plot with residuals and fitted values
plot(model)
plot(model$residuals)
hist(model$residuals)
plot(model$fitted,model$residuals)
plot(model)
plot(model$fitted,model$residuals)
hist(model)
hist(model$residuals)
hist(model$residuals, xlab="Residuals", main="Check normality with Histogram of residuals")
##Plot with residuals and fitted values, with histogram, and Q-Q
plot(model)
myData<-mtcars
View(myData)
structure(myData)
model1<-lm(mpg~disp,myData)
#Plot with relationship
plot(myData$disp,myData$mpg, xlab="disp",ylab="mpg")
abline(model1,col="red")
##Plot with residuals and fitted values, with histogram, and Q-Q
plot(model1)
hist(model1$residuals, xlab="Residuals", main="Check normality with Histogram of residuals")
hist(model1$residuals, xlab="Residuals", main="Check normality with Histogram of residuals")
model2<-lm(mpg~log(disp),myData)
summary(model2)
model1<-lm(mpg~disp,myData)
summary(model1)
model2<-lm(mpg~log(disp),myData)
summary(model2)
plot(myData$disp)
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
abline(model2,col="red")
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
abline(model2,col="red")
model2<-lm(mpg~log(disp),myData)
summary(model2)
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
abline(model2,col="red")
myData<-mtcars
View(myData)
structure(myData)
model1<-lm(mpg~disp,myData)
summary(model1)
#Plot with relationship
plot(myData$disp,myData$mpg, xlab="disp",ylab="mpg")
abline(model1,col="red")
##Plot with residuals and fitted values, with histogram, and Q-Q
plot(model1)
#Not nomrally distributed with histogram
hist(model1$residuals, xlab="Residuals", main="Check normality with Histogram of residuals")
model2<-lm(mpg~log(disp),myData)
summary(model2)
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
abline(model2,col="red")
plot(model1)
#Not nomrally distributed with histogram
hist(model1$residuals, xlab="Residuals", main="Check normality with Histogram of residuals")
myData<-mtcars
View(myData)
structure(myData)
model1<-lm(mpg~disp,myData)
summary(model1)
#Plot with relationship
plot(myData$disp,myData$mpg, xlab="disp",ylab="mpg")
abline(model1,col="red")
##Plot with residuals and fitted values, with histogram, and Q-Q
plot(model1)
#Not nomrally distributed with histogram
hist(model1$residuals, xlab="Residuals", main="Check normality with Histogram of residuals")
model2<-lm(mpg~log(disp),myData)
summary(model2)
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
abline(model2,col="red")
plot(model2)
#Not nomrally distributed with histogram
hist(model2$residuals, xlab="Residuals", main="Check normality with Histogram of residuals")
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
abline(model2,col="red")
plot(model2)
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
y<-predict(model2,interval="confidence")
matlines(y,lwd=2)
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
y<-predict(model2,interval="confidence")
x=seq(from=1,to=15,length.out=1000)
matlines(x,y,lwd=2)
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
y<-predict(model2,interval="confidence")
x=seq(from=1,to=500,length.out=32)
matlines(x,y,lwd=2)
matlines(x,y,lwd=1)
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
y<-predict(model2,interval="confidence")
x=seq(from=1,to=500,length.out=32)
matlines(x,y,lwd=1)
y<-predict(model2,interval="confidence")
x=seq(from=1,to=500,length.out=32)
matlines(x,y,lwd=2)
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
y<-predict(model2,interval="confidence")
x=seq(from=1,to=500,length.out=32)
matlines(x,y,lwd=2)
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
y<-predict(model2,interval="prediction")
x=seq(from=1,to=500,length.out=32)
matlines(x,y,lwd=2)
model3<-lm(log(mpg)~log(disp),myData)
summary(model3)
#Plot to see relationship
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
y<-predict(model3,interval="prediction")
x=seq(from=1,to=500,length.out=32)
matlines(x,y,lwd=2)
#PLot residuals vs. fitted, and Q-Q
plot(model3)
#Not nomrally distributed with histogram, but better than 1st histogram
hist(model3$residuals, xlab="Residuals", main="Check normality with Histogram of residuals")
model2<-lm(mpg~log(disp),myData)
summary(model2)
#Plot and see visuals
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
y<-predict(model2,interval="prediction")
x=seq(from=1,to=500,length.out=32)
matlines(x,y,lwd=2)
#Plot residuals vs fitted, and Q-Q
plot(model2)
#Not nomrally distributed with histogram, but better than 1st histogram
hist(model2$residuals, xlab="Residuals", main="Check normality with Histogram of residuals")
model3<-lm(log(mpg)~log(disp),myData)
summary(model3)
myData<-mtcars
View(myData)
structure(myData)
### Model 1 and all its residual plots
model1<-lm(mpg~disp,myData)
summary(model1)
#Plot with relationship
plot(myData$disp,myData$mpg, xlab="disp",ylab="mpg")
abline(model1,col="red")
#Plot with residuals and fitted values, with histogram, and Q-Q
plot(model1)
#Not nomrally distributed with histogram
hist(model1$residuals, xlab="Residuals", main="Check normality with Histogram of residuals")
stargazer(model1, model2, model3,covariate.labels=c("Intercept","disp"), type="html",  out="models.htm")
install.packages("stargazer")
library(stargazer)
model1<-lm(mpg~disp,myData)
model2<-lm(mpg~log(disp),myData)
model3<-lm(log(mpg)~log(disp),myData)
stargazer(model1, model2, model3,covariate.labels=c("Intercept","disp"), type="html",  out="models.htm")
stargazer(model1, model2, model3,covariate.labels=c("Intercept","disp"), type="text",  out="models1.text")
stargazer(model1, model2, model3,covariate.labels=c("disp"), type="text",  out="models1.text")
model1<-lm(mpg~disp,myData)
summary(model1)
stargazer(model1, model2, model3,covariate.labels=c("disp"), type="html",  out="models1.html")
stargazer(model1, model2, model3,covariate.labels=c("disp"), type="text",  out="models1.text")
myData<-mtcars
structure(myData)
#Plot with relationship
plot(myData$disp,myData$mpg, xlab="disp",ylab="mpg")
abline(model1,col="red")
#Plot with residuals and fitted values, with histogram, and Q-Q
plot(model1)
#Not nomrally distributed with histogram
hist(model1$residuals, xlab="Residuals", main="Check normality with Histogram of residuals")
#Plot with relationship
plot(myData$disp,myData$mpg, xlab="disp",ylab="mpg")
abline(model1,col="red")
#Plot with residuals and fitted values, with histogram, and Q-Q
plot(model1)
hist(model1$residuals, xlab="Residuals", main="Check normality with Histogram of residuals")
#Not a normally distributed histogram, skewed to right
#Plot and see visuals
plot(myData$disp, log(myData$mpg), xlab="disp",ylab="mpg")
# y<-predict(model2,interval="prediction")
# x=seq(from=1,to=500,length.out=32)
# matlines(x,y,lwd=2)
#Plot residuals vs fitted, and Q-Q
plot(model2)
hist(model2$residuals, xlab="Residuals", main="Check normality with Histogram of residuals")
#Not nomrally distributed with histogram, but better than 1st model's histogram
plot(myData$disp, log(myData$mpg), xlab="disp",ylab="mpg")
abline(model2,col="red")
abline(model2,col="red")
plot(myData$disp, log(myData$mpg), xlab="disp",ylab="mpg")
library(stargazer)
#Load and see structure of data
myData<-mtcars
structure(myData)
##Build, summarize, and interpret models
#Linear model
model1<-lm(mpg~disp,myData)
#Lin-Log model
model2<-lm(mpg~log(disp),myData)
#Log-Log model
model3<-lm(log(mpg)~log(disp),myData)
stargazer(model1, model2, model3,covariate.labels=c("disp"), type="text",  out="models1.text")
#We see that coefficients are stat significant for each model but, Lin-Log performs better with a higher R^2 and F-stat (more sample variance explained) despite its distribution not being as "normal" as Model 3's
plot(myData$disp, log(myData$mpg), xlab="disp",ylab="mpg")
abline(model2,col="red")
abline(model1,col="red")
plot(myData$disp, log(myData$mpg), xlab="disp",ylab="mpg")
abline(model1,col="red")
plot(myData$disp, log(myData$mpg), xlab="disp",ylab="mpg")
# y<-predict(model2,interval="prediction")
# x=seq(from=1,to=500,length.out=32)
# matlines(x,y,lwd=2)
matlines(x=seq(from=1,to=500,length.out=32),y=predict(model2,newdata=list(x=seq(from=1,to=500,length.out=32)),interval="confidence"))
plot(myData$disp, log(myData$mpg), xlab="disp",ylab="mpg")
y<-predict(model2,interval="prediction")
x<-seq(from=1,to=500,length.out=32)
matlines(x,y,lwd=2)
plot(myData$disp, log(myData$mpg), xlab="disp",ylab="mpg")
y<-predict(model2,interval="confidence")
x<-seq(from=1,to=500,length.out=32)
matlines(x,y,lwd=2)
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
y<-predict(model2,interval="confidence")
x<-seq(from=1,to=500,length.out=32)
matlines(x,y,lwd=2)
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
# y<-predict(model2,interval="confidence")
# x<-seq(from=1,to=500,length.out=32)
# matlines(x,y,lwd=2)
matlines(x=seq(from=1,to=500,length.out=32),y=predict(model2,newdata=list(x=seq(from=1,to=500,length.out=32)),interval="confidence"))
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
y<-predict(model2,interval="confidence")
x<-seq(from=1,to=500,length.out=32)
matlines(x,y,lwd=2)
y<-predict(model2)
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
y<-predict(model2)
x<-seq(from=1,to=500,length.out=32)
matlines(x,y,lwd=2)
plot(model2)
hist(model2$residuals, xlab="Residuals", main="Check normality with Histogram of residuals")
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
y2<-predict(model2)
x2<-seq(from=1,to=500,length.out=32)
matlines(x2,y2,lwd=2)
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
y2<-predict(model2)
x2<-seq(from=1,to=500,length.out=32)
matlines(x2,y2,lwd=1, col="blue")
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
y3<-predict(model3)
x3<-seq(from=1,to=500,length.out=32)
matlines(x3,y3,lwd=1, col="blue")
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
y3<-predict(model3)
x3<-seq(from=1,to=500,length.out=32)
matlines(x3,y3,lwd=1, col="green")
plot(myData$disp, myData$mpg, xlab="disp",ylab="mpg")
y3<-predict(model3)
x3<-seq(from=1,to=500,length.out=32)
matlines(x3,y3,lwd=2, col="green")
#Plot residuals vs. fitted, and Q-Q
#Plot and see visuals
library(ggplot2)
ggplot(myData, aes(myData$disp, myData$mpg)) + geom_line() + geom_area(alpha=0.3) + stat_smooth(method="lm",formula=y~log(x),fill="red")
ggplot(myData, aes(myData$disp, myData$mpg)) + geom_line() + stat_smooth(method="lm",formula=y~log(x),fill="red")
ggplot(myData, aes(myData$disp, myData$mpg)) + geom_point() + stat_smooth(method="lm",formula=y~log(x),fill="red")
ggplot(myData, aes(myData$disp, myData$mpg)) + geom_point() + stat_smooth(method="lm",formula=y~log(x),fill="gray")
library(ggplot2)
ggplot(myData, aes(myData$disp, myData$mpg)) + geom_point() + stat_smooth(method="lm",formula=log(y)~log(x),fill="gray")
ggplot(myData, aes(log(myData$disp), myData$mpg)) + geom_point() + stat_smooth(method="lm",fill="gray")
ggplot(myData, aes(log(myData$disp), myData$mpg)) + geom_point() + stat_smooth(method="lm",formula=y~log(x),fill="gray")
ggplot(myData, aes(log(myData$disp), myData$mpg)) + geom_point() + stat_smooth(method="lm",fill="gray")
ggplot(myData, aes(log(myData$disp), myData$mpg)) + geom_point() + stat_smooth(method="lm",fill="gray")
ggplot(myData, aes(myData$disp, myData$mpg)) + geom_point() + stat_smooth(method="lm",formula=y~log(x),fill="gray")
ggplot(myData, aes(myData$disp, myData$mpg)) + geom_point() + stat_smooth(method="lm",formula=log(y)~log(x),fill="gray")
ggplot(myData, aes(log(myData$disp), log(myData$mpg)) + geom_point() + stat_smooth(method="lm",fill="gray")
ggplot(myData, aes(log(myData$disp), log(myData$mpg))) + geom_point() + stat_smooth(method="lm",fill="gray")
ggplot(myData, aes(log(myData$disp), log(myData$mpg))) + geom_point() + stat_smooth(method="lm",fill="gray")
#Plot residuals vs. fitted, and Q-Q
plot(model3)
#Plot with residuals and fitted values, with histogram, and Q-Q
plot(model1)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
#Load and see structure of data
myData<-mtcars
structure(myData)
##Build, summarize, and interpret models
#Linear model
model1<-lm(mpg~disp,myData)
#Lin-Log model
model2<-lm(mpg~log(disp),myData)
#Log-Log model
model3<-lm(log(mpg)~log(disp),myData)
stargazer(model1, model2, model3,covariate.labels=c("disp"), type="text",  out="models1.text")
#We see that coefficients are stat significant for each model but, Lin-Log performs better with a higher R^2 and F-stat (more sample variance explained) despite its distribution not being as "normal" as Model 3's
#Plot with relationship
plot(myData$disp,myData$mpg, xlab="disp",ylab="mpg")
abline(model1,col="red")
#Plot with residuals and fitted values, with histogram, and Q-Q
plot(model1)
hist(model1$residuals, xlab="Residuals", main="Check normality with Histogram of residuals")
#Not a normally distributed histogram, skewed to right
#Plot and see visuals
library(ggplot2)
ggplot(myData, aes(log(myData$disp), myData$mpg)) + geom_point() + stat_smooth(method="lm",fill="gray")
#ggplot(myData, aes(myData$disp, myData$mpg)) + geom_point() + stat_smooth(method="lm",formula=y~log(x),fill="gray")
#Plot residuals vs fitted, and Q-Q
plot(model2)
hist(model2$residuals, xlab="Residuals", main="Check normality with Histogram of residuals")
#Not nomrally distributed with histogram, but better than 1st model's histogram
#Plot to see relationship
library(ggplot2)
ggplot(myData, aes(log(myData$disp), log(myData$mpg))) + geom_point() + stat_smooth(method="lm",fill="gray")
#Plot residuals vs. fitted, and Q-Q
plot(model3)
#Much more normally distributed
hist(model3$residuals, xlab="Residuals", main="Check normality with Histogram of residuals")
knitr::opts_chunk$set(echo = TRUE)
library(ipumsr)
ddi <- read_ipums_ddi("usa_00001.xml")
knitr::opts_chunk$set(echo = TRUE)
install.packages(kableExtra)
install.packages(stargazer)
install.packages(lmtest)
knitr::opts_chunk$set(echo = TRUE)
install.packages(kableExtra)
install.packages(lmtest)
install.packages(stargazer)
knitr::opts_chunk$set(echo = TRUE)
library(ipumsr)
ddi <- read_ipums_ddi("usa_000021.xml")
library(ipumsr)
ddi <- read_ipums_ddi("usa_000021.xml")
